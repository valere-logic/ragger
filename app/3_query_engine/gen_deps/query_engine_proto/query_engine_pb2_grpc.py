# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import query_engine_pb2 as query__engine__pb2


class QueryEngineStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getAnswerCitations = channel.unary_unary(
                '/QueryEngine/getAnswerCitations',
                request_serializer=query__engine__pb2.getAnswerCitationsRequest.SerializeToString,
                response_deserializer=query__engine__pb2.getAnswerCitationsResponse.FromString,
                )
        self.getSubContextLength = channel.unary_unary(
                '/QueryEngine/getSubContextLength',
                request_serializer=query__engine__pb2.SubEmpty.SerializeToString,
                response_deserializer=query__engine__pb2.SubModelContextLengthResponse.FromString,
                )
        self.getSubDefaultParams = channel.unary_unary(
                '/QueryEngine/getSubDefaultParams',
                request_serializer=query__engine__pb2.SubEmpty.SerializeToString,
                response_deserializer=query__engine__pb2.SubParams.FromString,
                )
        self.getSubBatchTokenizedLength = channel.unary_unary(
                '/QueryEngine/getSubBatchTokenizedLength',
                request_serializer=query__engine__pb2.SubLengthRequest.SerializeToString,
                response_deserializer=query__engine__pb2.SubLengthResponse.FromString,
                )


class QueryEngineServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getAnswerCitations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSubContextLength(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSubDefaultParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSubBatchTokenizedLength(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryEngineServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getAnswerCitations': grpc.unary_unary_rpc_method_handler(
                    servicer.getAnswerCitations,
                    request_deserializer=query__engine__pb2.getAnswerCitationsRequest.FromString,
                    response_serializer=query__engine__pb2.getAnswerCitationsResponse.SerializeToString,
            ),
            'getSubContextLength': grpc.unary_unary_rpc_method_handler(
                    servicer.getSubContextLength,
                    request_deserializer=query__engine__pb2.SubEmpty.FromString,
                    response_serializer=query__engine__pb2.SubModelContextLengthResponse.SerializeToString,
            ),
            'getSubDefaultParams': grpc.unary_unary_rpc_method_handler(
                    servicer.getSubDefaultParams,
                    request_deserializer=query__engine__pb2.SubEmpty.FromString,
                    response_serializer=query__engine__pb2.SubParams.SerializeToString,
            ),
            'getSubBatchTokenizedLength': grpc.unary_unary_rpc_method_handler(
                    servicer.getSubBatchTokenizedLength,
                    request_deserializer=query__engine__pb2.SubLengthRequest.FromString,
                    response_serializer=query__engine__pb2.SubLengthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'QueryEngine', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QueryEngine(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getAnswerCitations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngine/getAnswerCitations',
            query__engine__pb2.getAnswerCitationsRequest.SerializeToString,
            query__engine__pb2.getAnswerCitationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSubContextLength(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngine/getSubContextLength',
            query__engine__pb2.SubEmpty.SerializeToString,
            query__engine__pb2.SubModelContextLengthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSubDefaultParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngine/getSubDefaultParams',
            query__engine__pb2.SubEmpty.SerializeToString,
            query__engine__pb2.SubParams.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSubBatchTokenizedLength(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngine/getSubBatchTokenizedLength',
            query__engine__pb2.SubLengthRequest.SerializeToString,
            query__engine__pb2.SubLengthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
